(ns pegthing.core 
  (require [clojure.set :as set]) 
  (:gen-class)) 

(declare successful-move prompt-move game-over query-rows)

(defn tri*
  "Generates lazy sequence of triangular numbers" 
  ([] (tri* 0 1)) 
  ([ sum n] 
   (let [new-sum (+ sum n)]
     (cons new-sum (lazy-seq (tri* new-sum (inc n)))))))

;; test the triangular numbers
(def tri (tri*))
(take 5 tri)

(defn triangular?
  "Test if a number is a member of the triangular sequence (generated by tri*)"
  [n]
  (= n (last (take-while #(>= n %) tri))))  ;; NOTE - uses variable tri from parent scope

;; test triangularity
(triangular? 5)
(triangular? 6)

(defn row-tri
  "Find the triangular number at the end of row n"
  [n] 
  (last (take n tri)))

;; test row-tri
(row-tri 1)
(row-tri 2)
(row-tri 3)

(defn row-num
  "Find the row for a given position (pos 1 in row 1, pos 2 and 3 in row 2 etc)"
  [pos]
  (inc  (count (take-while #(> pos %) tri))))

;; test row-num
(map row-num (range 1 20))



